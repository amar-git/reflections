# Reflections from lesson 2

Q.	What happens when you initialize a repository? Why do you need to do it?
A.	First of all to initialize the git repository we run a command git init in
	concerned directory. When we initialize the repository it creates a hidden
	directory .git in the parent directory. This .git hidden folder or
	directory is used to store the various verions or commits that a user make.
	After its initialization we can run a command git status to see the current
	status of the repository. It actually contains nothing, i.e. the number of
	commits is zero and shows that it has n number of untracked files. We need
	to do this in order to be able to store various versions or commits of the
	file whenever required.

Q.	How is the staging area different from the working directory and the
	repository? What value do you think it offers?
A.	Staging area holds temporarily all the files that one might be interested
	in clubbing for a single commit. Is gives the choice of putting files
	together with a single logical change. Staging area lies in between the
	working directory and the repository. Once we are sure enough to commit,
	we can move all the file in the staging area to the repository and add a
	related commit message.
	Staging are offers a great way to organise files and apply judgemenal call
	that is required in order to make version control efficient and succint.

Q.	How can you use the staging area to make sure you have one commit per logical
	change?
A.	In order to keep a check on the commits being committed by clubbing a 
	single logical change, we can make use of staging area. When we add a file
	to the staging area, we can use the command git diff to see the differences
	between the files currently in the working directory and the staging area.
	And before committing we can do the same for the files in staging area and
	the recent commit in the repository by using the command git diff --staged.
	git diff --staged show us all the files which have been modified and stored
	in the staged area, it doesn't show the files which had been modified but
	not added to the staged area. So in this way we can track which files were
	modified from working directory to the staged area (before adding any file
	to the staged area, it contains file of the recent commit) and then before
	committing, we can see whether file being committed correspond to the single
	logical change or not.

Q.	What are some situations when branches would be helpful in keeping your
	history organized? How would branches help?
A.	Situations in which branches would help could be:
	Experimental feature addition, version of the website in another language,
	working to modify some feature while keeping the master branch intact, etc.
	All these situations can be easily handled by using sub branches as they
	do not affect the master branch and we can keep the master branch as it is
	to show someone like client or keep it running if its already deployed.
	Branches will keep the code separte from the master branch and when its
	ready, we can always merge in the master branch to take the change place
	in it.

Q.	How to the diagrams help you visualize the branch structure?
A.	The branch structure can be accessed using the following command:
	git log --graph --oneline <branch_first> <branch_second>
	It represents the log in a sort of diagram. Here we can see the master
	branch and the sub branches getting separated out of it and if there are
	any commits made in the master branch after separating the sub branch, then
	those are shown appropriately. It gives a visual account of all the
	branches and their commits.

Q.	What is the result of merging two branches together? Why do we represent
	it in the diagram the way we do?
A.	When we merge two branches together then all the contents of the branch 
	which is checkedout are upgraded with the contents of the sub branch. 
	Git uses an algorithm which checks the parent commit from which the sub
	branch was initiated and then it loooks for the current status of both the
	branches, i.e. what was deleted since then in the master branch and sub 
	branch and what was added. Based on this the master branch is updated.
	By representing it in the diagram the way we do helps us visualize the
	parent of the sub branch and the number of commits that we have made since
	then in both the branches. It also helps us see the commit messages and
	decide what changes could have been made before using diff on any commit.

